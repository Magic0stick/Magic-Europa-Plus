using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._Europa.Copier;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Europa.Copier;

[GenerateTypedNameReferences]
public sealed partial class CopierWindow : FancyWindow
{
    private readonly IPrototypeManager _protoManager;

    public event Action<DocumentFormPrototype>? FormButtonPressed;
    public event Action? StartButtonPressed;
    public event Action? StopButtonPressed;
    public event Action? CopyModeButtonPressed;
    public event Action? PrintModeButtonPressed;
    public event Action<int>? AmountChanged;

    private readonly List<string> _categories = new();
    private string? _selectedCategory;
    private DocumentFormPrototype? _selectedForm;
    private string _searchText = string.Empty;

    public CopierWindow(IPrototypeManager protoManager)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _protoManager = protoManager;

        Amount.SetButtons(new() { -2, -1 }, new() { 1, 2 });
        Amount.IsValid = n => n > 0 && n < 11;

        StartButton.OnPressed += _ =>
        {
            StartButtonPressed?.Invoke();
            StartButton.Disabled = true;
            StopButton.Disabled = false;
        };

        StopButton.OnPressed += _ =>
        {
            StopButtonPressed?.Invoke();
            StopButton.Disabled = true;
            StartButton.Disabled = false;
        };

        CopyModeButton.OnPressed += _ => CopyModeButtonPressed?.Invoke();
        PrintModeButton.OnPressed += _ => PrintModeButtonPressed?.Invoke();

        Amount.ValueChanged += _ => AmountChanged?.Invoke(Amount.Value);

        SearchBar.OnTextChanged += OnSearchBarTextChanged;
    }

    public void UpdateState(CopierUiState state)
    {
        Amount.Value = state.Amount;
        StartButton.Disabled = !state.CanPrint;

        CopyModeButton.Pressed = state.Mode == CopierMode.Copy;
        PrintModeButton.Pressed = state.Mode == CopierMode.Print;

        if (state.Mode == CopierMode.Copy && !state.CanCopy)
            StartButton.Disabled = true;
        if (state.Mode == CopierMode.Print && !state.CanPrint)
            StartButton.Disabled = true;
        if (!state.CanStop)
            StopButton.Disabled = true;

        _selectedForm = state.SelectedForm;

        PopulateCategories();
        PopulateForms();
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        _searchText = args.Text.Trim().ToLowerInvariant();
        PopulateForms();
    }

    private IEnumerable<DocumentFormPrototype> AllForms =>
        _protoManager.EnumeratePrototypes<DocumentFormPrototype>();

    private IEnumerable<DocumentFormPrototype> FilteredForms =>
        AllForms
            .Where(p =>
                (string.IsNullOrEmpty(_searchText) || Loc.GetString(p.Name).ToLowerInvariant().Contains(_searchText)) &&
                (_selectedCategory == null || p.Category.Equals(_selectedCategory)))
            .OrderBy(p => Loc.GetString(p.Name));

    private void PopulateForms()
    {
        DocumentForms.RemoveAllChildren();

        foreach (var prototype in FilteredForms)
        {
            if (!_categories.Contains(prototype.Category))
                continue;

            var button = new Button
            {
                Text = Loc.GetString(prototype.Name),
                ToggleMode = true,
                Pressed = (_selectedForm?.ID ?? "") == prototype.ID,
            };

            button.AddStyleClass("OpenLeft");
            button.OnPressed += _ => OnFormSelected(prototype, button);
            DocumentForms.AddChild(button);
        }
    }

    private void PopulateCategories()
    {
        DocumentCategories.DisposeAllChildren();
        _categories.Clear();

        foreach (var category in AllForms.Select(p => p.Category).Distinct().OrderBy(c => c))
        {
            _categories.Add(category);

            var button = new Button
            {
                Text = Loc.GetString(category),
                ToggleMode = true,
                Pressed = _selectedCategory == category,
            };

            button.AddStyleClass("OpenRight");
            button.OnPressed += _ => OnCategorySelected(category, button);
            DocumentCategories.AddChild(button);
        }
    }

    private void OnCategorySelected(string category, Button button)
    {
        _selectedCategory = category;

        foreach (var child in DocumentCategories.Children.OfType<Button>())
        {
            child.Pressed = child == button;
        }

        PopulateForms();
    }

    private void OnFormSelected(DocumentFormPrototype form, Button button)
    {
        foreach (var child in DocumentForms.Children.OfType<Button>())
        {
            child.Pressed = child == button;
        }

        FormButtonPressed?.Invoke(form);
    }
}
