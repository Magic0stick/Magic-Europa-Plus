using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Content.Server.Database.Migrations.Postgres
{
    /// <inheritdoc />
    public partial class RoleWhitelist : Migration
    {
       protected override void Up(MigrationBuilder migrationBuilder)
{
    migrationBuilder.Sql(@"
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'role_whitelist') THEN
                CREATE TABLE role_whitelist (
                    role_whitelist_id integer GENERATED BY DEFAULT AS IDENTITY,
                    player_id uuid NOT NULL,
                    first_time_added timestamp with time zone NOT NULL,
                    first_time_added_by uuid NOT NULL,
                    how_many_times_added integer NOT NULL,
                    in_whitelist boolean NOT NULL,
                    last_time_added timestamp with time zone NOT NULL,
                    last_time_added_by uuid NOT NULL,
                    last_time_removed timestamp with time zone NULL,
                    last_time_removed_by uuid NULL,
                    CONSTRAINT ""PK_role_whitelist"" PRIMARY KEY (role_whitelist_id),
                    CONSTRAINT ""FK_role_whitelist_player_player_id"" FOREIGN KEY (player_id) REFERENCES player (user_id) ON DELETE CASCADE
                );
            END IF;
        END $$;
    ");

    migrationBuilder.Sql(@"
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'role_whitelist_log') THEN
                CREATE TABLE role_whitelist_log (
                    role_whitelist_log_id integer GENERATED BY DEFAULT AS IDENTITY,
                    admin_id uuid NOT NULL,
                    player_id uuid NOT NULL,
                    role_whitelist_action text NOT NULL,
                    time timestamp with time zone NOT NULL,
                    CONSTRAINT ""PK_role_whitelist_log"" PRIMARY KEY (role_whitelist_log_id)
                );
            END IF;
        END $$;
    ");

    migrationBuilder.Sql(@"
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_role_whitelist_player_id') THEN
                CREATE UNIQUE INDEX ""IX_role_whitelist_player_id"" ON role_whitelist (player_id);
            END IF;

            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_role_whitelist_log_admin_id') THEN
                CREATE INDEX ""IX_role_whitelist_log_admin_id"" ON role_whitelist_log (admin_id);
            END IF;

            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_role_whitelist_log_player_id') THEN
                CREATE INDEX ""IX_role_whitelist_log_player_id"" ON role_whitelist_log (player_id);
            END IF;
        END $$;
    ");
}

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(@"
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'role_whitelist_log') THEN
                DROP TABLE role_whitelist_log;
            END IF;
        END $$;
    ");

            migrationBuilder.Sql(@"
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'role_whitelist') THEN
                -- Удаляем новую таблицу
                DROP TABLE role_whitelist;

                -- Создаем старую таблицу
                CREATE TABLE role_whitelists (
                    player_user_id uuid NOT NULL,
                    role_id text NOT NULL,
                    CONSTRAINT ""PK_role_whitelists"" PRIMARY KEY (player_user_id, role_id),
                    CONSTRAINT ""FK_role_whitelists_player_player_user_id"" FOREIGN KEY (player_user_id) REFERENCES player (user_id) ON DELETE CASCADE
                );
            END IF;
        END $$;
    ");
        }
    }
}
